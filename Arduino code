const int triggeredLED = 7;
const int triggeredLED2 = 8;
const int RedLED = 4;
const int GreenLED = 5;
const int inputPin = A0;  // LDR connected to A0
const int speakerPin = 12;
const int armButton = 6;

boolean isArmed = true;
boolean isTriggered = false;
int buttonVal = 0;
int prev_buttonVal = 0;
int reading = 0;
int threshold = 0;
const int lowrange = 2000;
const int highrange = 4000;

void setup() {
  // Initialize pins
  pinMode(triggeredLED, OUTPUT);
  pinMode(triggeredLED2, OUTPUT);
  pinMode(RedLED, OUTPUT);
  pinMode(GreenLED, OUTPUT);
  pinMode(armButton, INPUT_PULLUP);

  // Start serial communication
  Serial.begin(9600);

  // Blink the triggered LED as an initial signal
  digitalWrite(triggeredLED, HIGH);
  delay(500);
  digitalWrite(triggeredLED, LOW);

  // Calibrate the system and set the armed state
  calibrate(); 
  setArmedState();
}

void loop() {
  // Read the LDR value
  reading = analogRead(inputPin);

  // Print the LDR value to the Serial Monitor
  Serial.print("LDR Value: ");
  Serial.println(reading);

  // Read the arm button value
  buttonVal = digitalRead(armButton);

  // Debounce button presses to toggle armed state
  unsigned long lastDebounceTime = 0;
  const unsigned long debounceDelay = 50;
  if ((buttonVal == HIGH) && (prev_buttonVal == LOW) && (millis() - lastDebounceTime > debounceDelay)) {
    setArmedState();
    lastDebounceTime = millis();
  }

  // Check if the system is armed and the LDR reading is below the threshold
  if ((isArmed) && (reading < threshold)) {
    isTriggered = true;
  }

  if (isTriggered) {
    // Play sound on the speaker
    for (int i = lowrange; i <= highrange; i++) {
      tone(speakerPin, i, 250);
    }
    for (int i = highrange; i >= lowrange; i--) {
      tone(speakerPin, i, 250);
    }

    // Flash triggered LEDs
    digitalWrite(triggeredLED, HIGH);
    delay(50);
    digitalWrite(triggeredLED, LOW);
    delay(50);
    digitalWrite(triggeredLED2, HIGH);
    delay(50);
    digitalWrite(triggeredLED2, LOW);
    delay(50);
  }

  delay(20);
  prev_buttonVal = buttonVal; // Update the previous button state
}

void setArmedState() {
  if (isArmed) {
    digitalWrite(GreenLED, HIGH);
    digitalWrite(RedLED, LOW);
    isTriggered = false;
    isArmed = false;
  } else {
    digitalWrite(GreenLED, LOW);
    digitalWrite(RedLED, HIGH);
    tone(speakerPin, 220, 125);
    delay(200);
    tone(speakerPin, 196, 250);
    isArmed = true;
  }
}

void calibrate() {
  int sample = 0;
  int baseline = analogRead(inputPin); // Set a baseline based on the initial value.
  const int min_diff = 200;
  const int sensitivity = 50;
  int success_count = 0;

  digitalWrite(RedLED, LOW);
  digitalWrite(GreenLED, LOW);

  // Calibrate by sampling the LDR value several times
  for (int i = 0; i < 10; i++) {
    sample += analogRead(inputPin);
    digitalWrite(GreenLED, HIGH);
    delay(50);
    digitalWrite(GreenLED, LOW);
    delay(50);
  }

  unsigned long startTime = millis();
  unsigned long timeout = 5000; // 5 seconds timeout
  do {
    sample = analogRead(inputPin);

    if (sample > baseline + min_diff) {
      success_count++;
      threshold += sample;
      digitalWrite(GreenLED, HIGH);
      delay(100);
      digitalWrite(GreenLED, LOW);
      delay(100);
    } else {
      success_count = 0;
      threshold = 0;
    }
  } while (success_count < 3 && (millis() - startTime < timeout));

  // If calibration is not successful, set a default threshold
  if (success_count < 3) {
    threshold = baseline + min_diff;
  }
}
